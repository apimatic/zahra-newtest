{
  "openapi": "3.0.0",
  "info": {
    "title": "WP Global CNP Payment API",
    "description": "<b>Request Payload Validation Testing</b> endpoints\r\n                                    <br/>\r\n                                    <br/> \r\n                                    Functional Goals:\r\n                                    <pre>   <span>&#8226;</span>  Clean API surface area following standard REST conventions\r\n                                    <pre>   <span>&#8226;</span>  Thin mapping layer over an integration to <b>WPG's</b> XML-RPC webAPI for US and Intl Merchants\r\n                                    <pre>   <span>&#8226;</span>  Logically strutured Request and Response objects\r\n                                    <pre>   <span>&#8226;</span>  Support of Idempotency (via a HTTP Header)\r\n                                    <pre>   <span>&#8226;</span>  Ability to easily adding new <b>payment methods</b> via a polymorphic <b>PaymentMethod</b> property\r\n                                    <pre>   <span>&#8226;</span>  Ability to easily adding new <b>industry specific</b> data via a polymorphic <b>IndustryData</b> property\r\n                                    <pre>   <span>&#8226;</span>  Developer friendly <b>Request Data Validation error</b> responses\r\n                                    <pre>   <span>&#8226;</span>  Support for \"Referenced\" follow on transactions\r\n                                    <pre>   <span>&#8226;</span>  Baked in support for Sync responses (indicated by a HTTP 200 return code) and Async responses (indicated by a HTTP 202 return code).\r\n                                    <pre>   <span>&#8226;</span>  Error responses returned in RFC7807 ProblemDetails compliant responses\r\n                                    <pre>   <span>&#8226;</span>  High Fidelity OpenAPI v3 file (incl oneOf and type descriminators for polymorphic properties)\r\n                                    <br/> \r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Version</th>\r\n                                        <th>Changes</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>2022/04/15</td>\r\n                                        <td>v1.0</td>\r\n                                        <td> Alpha implementation\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                                    ",
    "contact": {
      "name": "FIS Merchant Solutions",
      "url": "https://www.fisglobal.com/en-gb",
      "email": "tom.bruns@fisglobal.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:7025",
      "variables": {}
    },
    {
      "url": "https://localhost:7025",
      "variables": {}
    },
    {
      "url": "https://localhost:7025",
      "variables": {}
    },
    {
      "url": "https://localhost:7025",
      "variables": {}
    }
  ],
  "paths": {
    "/api/v1/payments/sale": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "SalePayment",
        "description": "You want to process an Authorization and Capture in one (1) step.",
        "operationId": "SalePayment",
        "parameters": [
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Sale Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SalePaymentRequest"
                  },
                  {
                    "description": "The information for the Payment Sale Request",
                    "example": {
                      "merchantCode": "US_MERCHANT_CODE",
                      "callersReferenceId": "Sample 1",
                      "amount": {
                        "value": 1000,
                        "currencyCode": "USD"
                      },
                      "paymentMethod": {
                        "type": "card/scheme",
                        "cardNumber": "4111111111111111",
                        "cardVerificationCode": "123",
                        "expiryMonth": 1,
                        "expiryYear": 2025
                      },
                      "customerData": {
                        "billingAddress": {
                          "postalCode": "12345"
                        }
                      },
                      "customerInteractionType": "ECOMMERCE"
                    }
                  }
                ]
              },
              "examples": {
                "AUTH-SchemeCard-USD": {
                  "summary": "Make a payment (in USD) using a Card",
                  "description": "This example shows a payment Sale request using a Card",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-GiftCard-USD": {
                  "summary": "Make a payment (in USD) using a Closed Loop Gift Card",
                  "description": "This example shows a payment Sale request using a Closed Loop Gift Card",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/merchant_gift",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-WPSecurityToken-GBP": {
                  "summary": "Make a payment (in GBP) using a Token:WorldPay Security",
                  "description": "This example shows a payment Sale request using a WorldPay Security Token",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "token/wp_security",
                      "tokenValue": "4111111234561111",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-NetworkToken-GBP": {
                  "summary": "Make a payment (in GBP) using a Token:Network",
                  "description": "This example shows a payment Sale request using a Network Token",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "token/network",
                      "token": "4242424242424242",
                      "tokenType": "VISA",
                      "expiryMonth": 10,
                      "expiryYear": 2025,
                      "eci": "06",
                      "cryptogram": "AgAAAAAAAIR8CQrXcIhbQAAAAAA"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-ApplePay-GBP": {
                  "summary": "Make a payment (in GBP) using a Wallet:ApplePay",
                  "description": "This example shows a payment Sale request using an ApplePay Wallet",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "wallet/applepay",
                      "header": {
                        "ephemeralPublicKey": "AAAAAA...",
                        "publicKeyHash": "AAAAAA...",
                        "transactionId": "AAAAAA..."
                      },
                      "signature": "AAAAAA...",
                      "version": "EC_v1",
                      "data": "AAAAAA..."
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-GooglePay-GBP": {
                  "summary": "Make a payment (in GBP) using a Wallet:GooglePay",
                  "description": "This example shows a payment Sale request using an GooglePay Wallet",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "wallet/googlepay",
                      "protocolVersion": "AAAAAA...",
                      "signature": "AAAAAA...",
                      "signedMessage": "AAAAAA..."
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-Klarna-GBP": {
                  "summary": "Make a payment (in GBP) using a APM:Klarna",
                  "description": "This example shows a payment Sale request using an Buy Now/Pay Later APM: Klarna",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 56500,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "apm/klarna",
                      "klarnaWayToPay": "UNKNOWN",
                      "lineItems": [
                        {
                          "id": "1",
                          "description": "Bananas",
                          "quantity": 10,
                          "qtyUnitOfMeasure": "bag",
                          "unitPrice": 1000,
                          "taxPercentage": 2500,
                          "taxAmount": 2500,
                          "amountIncludingTax": 12500,
                          "productUrl": "https://www.estore.com/products/f2a8d7e34",
                          "imageUrl": "https://www.exampleobjects.com/logo.png"
                        },
                        {
                          "id": "2",
                          "description": "Apples",
                          "quantity": 4,
                          "qtyUnitOfMeasure": "bag",
                          "unitPrice": 9000,
                          "taxPercentage": 2500,
                          "taxAmount": 9000,
                          "amountIncludingTax": 44000,
                          "productUrl": "https://www.estore.com/products/f2a8d7e34",
                          "imageUrl": "https://www.exampleobjects.com/logo.png"
                        }
                      ]
                    },
                    "customerData": {
                      "billingAddress": {
                        "street": "34 Cambridge Street",
                        "city": "Cambridge",
                        "stateOrProvince": "Cambridgeshire",
                        "postalCode": "CB2 3NE",
                        "country": "GB"
                      },
                      "shippingAddress": {
                        "street": "34 Cambridge Street",
                        "city": "Cambridge",
                        "stateOrProvince": "Cambridgeshire",
                        "postalCode": "CB2 3NE",
                        "country": "GB"
                      },
                      "telephoneNumber": "0123456789",
                      "emailAddress": "shopper@worldpay.com"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenizeResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenizeResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "TOKENIZE: WP Security Token": {
                    "summary": "Generate WP Security Token for Card Information",
                    "description": "This example shows the response to generating a Security Token for Card Information",
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/authorize": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "AuthorizePayment",
        "description": "Note: The response contains the WPTransactionId you will use for follow-on actions",
        "operationId": "AuthorizePayment",
        "parameters": [
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Authorization Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizePaymentRequest"
                  },
                  {                                
                      "code":"#include <stdio.h> int main()  { printf(\"hello world\"); }", 
                      "language":"C"
                     ,
                    "example": {
                      "merchantCode": "US_MERCHANT_CODE",
                      "callersReferenceId": "Sample 1",
                      "amount": {
                        "value": 1000,
                        "currencyCode": "USD"
                      },
                      "paymentMethod": {
                        "type": "card/scheme",
                        "cardHolderName": "A Cardholder",
                        "cardNumber": "4111111111111111",
                        "cardVerificationCode": "123",
                        "expiryMonth": 1,
                        "expiryYear": 2025
                      },
                      "customerData": {
                        "billingAddress": {
                          "postalCode": "12345",
                          "country": "USA"
                        }
                      },
                      "customerInteractionType": "ECOMMERCE"
                    }
                  }
                ]
              },
              "examples": {
                "AUTH-SchemeCard-USD": {
                  "summary": "Make a payment (in USD) using a Card",
                  "description": "This example shows a payment Auth request using a Card (plain text)",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCard-USD-Error": {
                  "summary": "Make a payment (in USD) using a Card (w/ multiple Validation Issues)",
                  "description": "This example shows a payment Auth request using a Card (plain text) w/ multiple Valdiation Issues",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "411",
                      "cardVerificationCode": "123456789",
                      "expiryMonth": 13,
                      "expiryYear": 2035
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCard-Payfac-USD": {
                  "summary": "Make a payment (in USD) using a Card (Payfac)",
                  "description": "This example shows PayFac making a payment Auth request using a Card (plain text)",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "payfacData": {
                      "payfacId": "12345678901",
                      "submerchantId": "1234567",
                      "submerchantName": "Example Shop",
                      "submerchantAddress": {
                        "street": "123 Street",
                        "city": "San Francisco",
                        "stateOrProvince": "CA",
                        "postalCode": "94101",
                        "country": "USA"
                      },
                      "submerchantTaxId": "987-65-4321"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCardEncrypted-USD": {
                  "summary": "Make a payment (in USD) using a Card (encrypted)",
                  "description": "This example shows a payment Auth request using a Card (encrypted text)",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme_encrypted",
                      "encryptedCardNumber": "4G&7Y^KLI9)DHGS$DE",
                      "encryptedCardVerificationCode": "5&gH",
                      "encryptedExpiryMonth": "KS",
                      "encryptedExpiryYear": "S6F*",
                      "CardHolderName": "A Cardholder"
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCard-Lodging-USD": {
                  "summary": "Make a payment (in USD) using a Card (w/ Lodging Data)",
                  "description": "This example shows a payment Auth request using a Card (plain text) w/ Lodging Data",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "industryData": {
                      "type": "industry/lodging",
                      "hotelFolioNumber": "AZ12345",
                      "checkInDate": "2023-04-14",
                      "checkOutDate": "2023-04-16",
                      "numberOfDays": 2,
                      "numberOfAdults": 2,
                      "customerServiceTollFreeNumber": "18001112345",
                      "propertyLocalPhoneNumber": "5134981234",
                      "fireSafetyIndicator": true,
                      "roomRate": {
                        "value": 10000,
                        "currencyCode": "USD"
                      },
                      "roomTax": {
                        "value": 1000,
                        "currencyCode": "USD"
                      }
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCard-Airline-USD": {
                  "summary": "Make a payment (in USD) using a Card (w/ Airline Data)",
                  "description": "This example shows a payment Auth request using a Card (plain text) w/ Airline Data",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "industryData": {
                      "type": "industry/airline",
                      "departureDate": "0001-01-01",
                      "passenger": {
                        "firstName": "Joe",
                        "lastName": "Smith",
                        "dateOfBirth": "1961-08-29",
                        "telephoneNumber": "1234567890",
                        "travelerType": "ABC"
                      },
                      "tripLegs": [
                        {
                          "carrierCode": "JB",
                          "flightNumber": "12345",
                          "classOfTravel": "Economy",
                          "departureDate": "2023-04-14T10:42:00",
                          "departureTax": 123,
                          "destinationAirportCode": "ABCDE",
                          "fareBasisCode": "1234567890ABCDE"
                        }
                      ]
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-SchemeCard-Level23-USD": {
                  "summary": "Make a payment (in USD) using a Card (w/ Level2&3 Data)",
                  "description": "This example shows a payment Auth request using a Card (plain text) w/ Level23 Data",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/scheme",
                      "cardHolderName": "A Cardholder",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "industryData": {
                      "type": "industry/level2_3",
                      "customerReference": "Customer Reference",
                      "invoiceReferenceNo": "Merchant Invoice No",
                      "orderDate": "2023-04-14",
                      "shipFromCountryCode": "USA",
                      "shipFromPostalCode": "45141",
                      "destinationCountryCode": "US",
                      "destinationPostalCode": "45297",
                      "lineItems": [
                        {
                          "itemSequenceNo": "1",
                          "commodityCode": "ABCD",
                          "itemDescription": "Orange",
                          "productCode": "12345",
                          "quantity": 1,
                          "uom": "EA",
                          "unitCost": {
                            "value": 100,
                            "currencyCode": "USD"
                          },
                          "lineItemTotal": {
                            "value": 100,
                            "currencyCode": "USD"
                          }
                        },
                        {
                          "itemSequenceNo": "2",
                          "commodityCode": "EFGH",
                          "itemDescription": "APPLE",
                          "productCode": "67890",
                          "quantity": 1,
                          "uom": "EA",
                          "unitCost": {
                            "value": 200,
                            "currencyCode": "USD"
                          },
                          "lineItemTotal": {
                            "value": 200,
                            "currencyCode": "USD"
                          }
                        }
                      ]
                    },
                    "customerData": {
                      "billingAddress": {
                        "postalCode": "12345",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-GiftCard-USD": {
                  "summary": "Make a payment (in USD) using a Closed Loop Gift Card",
                  "description": "This example shows a payment Auth request using a Closed Loop Gift Card",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "card/merchant_gift",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123"
                    },
                    "customerInteractionType": "MOTO"
                  }
                },
                "AUTH-WPSecurityToken-GBP": {
                  "summary": "Make a payment (in GBP) using a Token:WorldPay Security",
                  "description": "This example shows a payment Auth request using a WorldPay Security Token",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "token/wp_security",
                      "tokenValue": "4111111234561111",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-NetworkToken-GBP": {
                  "summary": "Make a payment (in GBP) using a Token:Network",
                  "description": "This example shows a payment Auth request using a Network Token",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "token/network",
                      "token": "4242424242424242",
                      "tokenType": "VISA",
                      "expiryMonth": 10,
                      "expiryYear": 2025,
                      "eci": "06",
                      "cryptogram": "AgAAAAAAAIR8CQrXcIhbQAAAAAA"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-ApplePay-GBP": {
                  "summary": "Make a payment (in GBP) using a Wallet:ApplePay",
                  "description": "This example shows a payment Auth request using an ApplePay Wallet",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "wallet/applepay",
                      "header": {
                        "ephemeralPublicKey": "AAAAAA...",
                        "publicKeyHash": "AAAAAA...",
                        "transactionId": "AAAAAA..."
                      },
                      "signature": "AAAAAA...",
                      "version": "EC_v1",
                      "data": "AAAAAA..."
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-GooglePay-GBP": {
                  "summary": "Make a payment (in GBP) using a Wallet:GooglePay",
                  "description": "This example shows a payment Auth request using an GooglePay Wallet",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 1000,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "wallet/googlepay",
                      "protocolVersion": "AAAAAA...",
                      "signature": "AAAAAA...",
                      "signedMessage": "AAAAAA..."
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-APMKlarna-GBP": {
                  "summary": "Make a payment (in GBP) using a APM:Klarna",
                  "description": "This example shows a payment Auth request using an Buy Now/Pay Later APM: Klarna",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 56500,
                      "currencyCode": "GBP"
                    },
                    "paymentMethod": {
                      "type": "apm/klarna",
                      "klarnaWayToPay": "PAY_LATER",
                      "successURL": "http://www.merchanturl.com?successURL",
                      "failureURL": "http://www.merchanturl.com?failureURL",
                      "cancelURL": "http://www.merchanturl.com?cancelURL",
                      "pendingURL": "http://www.merchanturl.com?pendingURL",
                      "lineItems": [
                        {
                          "id": "1",
                          "description": "Bananas",
                          "quantity": 10,
                          "qtyUnitOfMeasure": "bag",
                          "unitPrice": 1000,
                          "taxPercentage": 2500,
                          "taxAmount": 2500,
                          "amountIncludingTax": 12500,
                          "productUrl": "https://www.estore.com/products/f2a8d7e34",
                          "imageUrl": "https://www.exampleobjects.com/logo.png"
                        },
                        {
                          "id": "2",
                          "description": "Apples",
                          "quantity": 4,
                          "qtyUnitOfMeasure": "bag",
                          "unitPrice": 9000,
                          "taxPercentage": 2500,
                          "taxAmount": 9000,
                          "amountIncludingTax": 44000,
                          "productUrl": "https://www.estore.com/products/f2a8d7e34",
                          "imageUrl": "https://www.exampleobjects.com/logo.png"
                        }
                      ]
                    },
                    "customerData": {
                      "billingAddress": {
                        "firstName": "A",
                        "lastName": "Customer",
                        "street": "34 Cambridge Street",
                        "city": "Cambridge",
                        "stateOrProvince": "Cambridgeshire",
                        "postalCode": "CB2 3NE",
                        "country": "GBR"
                      },
                      "shippingAddress": {
                        "firstName": "A",
                        "lastName": "Customer",
                        "street": "34 Cambridge Street",
                        "city": "Cambridge",
                        "stateOrProvince": "Cambridgeshire",
                        "postalCode": "CB2 3NE",
                        "country": "GBR"
                      },
                      "telephoneNumber": "0123456789",
                      "emailAddress": "shopper@worldpay.com",
                      "shopperLocale": "en"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-APMPayPal-USD": {
                  "summary": "Make a payment (in GBP) using a APM:Paypal",
                  "description": "This example shows a payment Auth request using Paypal (APM)",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "apm/paypal",
                      "successURL": "https://www.merchant.com/paymentProcessor.html?order=TG20071016-002&status=success",
                      "cancelURL": "https://www.merchant.com/shoppingCart.html?order=TG20071016-002",
                      "failureURL": "https://www.merchant.com/paymentProcessor.html?order=TG20071016-002&status=failure"
                    },
                    "customerData": {
                      "billingAddress": {
                        "firstName": "Sherlock",
                        "lastName": "Holmes",
                        "street": "221B Baker Street",
                        "streetLine2": "Marylebone Westminster",
                        "city": "London",
                        "stateOrProvince": "Greater London",
                        "postalCode": "NW1 6XE",
                        "country": "GBR"
                      },
                      "shippingAddress": {
                        "firstName": "James",
                        "lastName": "Moriarty",
                        "street": "The Palatine Centre",
                        "streetLine2": "Symmes Township",
                        "city": "Durham",
                        "stateOrProvince": "County Durham",
                        "postalCode": "DH1 3LE",
                        "country": "GBR"
                      },
                      "shopperLocale": "en"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-APMGiropay-EUR": {
                  "summary": "Make a payment (in EUR) using a APM:Giropay",
                  "description": "This example shows a payment Auth request using Giropay (APM)",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "EUR"
                    },
                    "paymentMethod": {
                      "type": "apm/giropay",
                      "successURL": "http://www.worldpay.com/?success",
                      "cancelURL": "http://www.worldpay.com/?cancel",
                      "failureURL": "http://www.worldpay.com/?failure",
                      "swiftCode": "PBNKDEFF"
                    },
                    "customerData": {
                      "billingAddress": {
                        "country": "DEU"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-APMIdeal-EUR": {
                  "summary": "Make a payment (in EUR) using a APM:Ideal",
                  "description": "This example shows a payment Auth request using Ideal (APM)",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "EUR"
                    },
                    "paymentMethod": {
                      "type": "apm/ideal",
                      "successURL": "http://www.worldpay.com/?successURL",
                      "failureURL": "http://www.worldpay.com/?failureURL",
                      "cancelURL": "http://www.worldpay.com/?cancelURL",
                      "pendingURL": "http://www.worldpay.com/?pendingURL",
                      "bankCode": "ABN_AMRO"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-DirectDebitACH-USD": {
                  "summary": "Make a payment (in USD) using a Direct Debit:ACH",
                  "description": "This example shows a payment Auth request using Direct Debit via ACH",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "direct_debit/ach",
                      "accountType": "checking",
                      "accountNumber": "01234567890123456",
                      "routingNumber": "01234567",
                      "checkNumber": "012345678901234"
                    },
                    "customerData": {
                      "billingAddress": {
                        "firstName": "John",
                        "lastName": "Johnson",
                        "street": "8500 Govenors Hill Drive",
                        "streetLine2": "Symmes Township",
                        "city": "Ohio",
                        "stateOrProvince": "OH",
                        "postalCode": "45249",
                        "country": "USA"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-DirectDebitEFT-CAD": {
                  "summary": "Make a payment (in CAD) using a Direct Debit:EFT",
                  "description": "This example shows a payment Auth request using Direct Debit via EFT",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "USD"
                    },
                    "paymentMethod": {
                      "type": "direct_debit/eft",
                      "accountType": "checking",
                      "accountNumber": "01234567890123456",
                      "routingNumber": "01234567",
                      "checkNumber": "012345678901234"
                    },
                    "customerData": {
                      "billingAddress": {
                        "firstName": "John",
                        "lastName": "Johnson",
                        "street": "10-123 1/2 MAIN ST NW",
                        "city": "MONTREAL",
                        "stateOrProvince": "QC",
                        "postalCode": "H32 2YZ",
                        "country": "CAN"
                      }
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                },
                "AUTH-DirectDebitSEPA-EUR": {
                  "summary": "Make a payment (in EUR) using a Direct Debit:SEPA",
                  "description": "This example shows a payment Auth request using Direct Debit via SEPA",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE",
                    "callersReferenceId": "Sample 1",
                    "amount": {
                      "value": 250,
                      "currencyCode": "EUR"
                    },
                    "paymentMethod": {
                      "type": "direct_debit/sepa",
                      "iban": "DE12123456781234567890"
                    },
                    "customerData": {
                      "billingAddress": {
                        "firstName": "Bruno",
                        "lastName": "Forst",
                        "street": "Karl-Liebknecht-Strasse 85",
                        "city": "Kaltenkirchen",
                        "stateOrProvince": "Schleswig-Holstein",
                        "postalCode": "24562",
                        "country": "DEU"
                      },
                      "emailAddress": "Bruno.Forst@gmail.com"
                    },
                    "customerInteractionType": "ECOMMERCE"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizePaymentResponse"
                    },
                    {
                      "example": {
                        "resultCode": "Undefined",
                        "refusalReason": "Undefined"
                      }
                    }
                  ]
                },
                "examples": {
                  "AUTH-SchemeCard-USD-Approve": {
                    "summary": "Make a payment (in USD) using a Card - Approve",
                    "description": "This example shows a payment Auth request using a Card (plain text) with am Approved Response",
                    "value": {
                      "resultCode": "Undefined",
                      "refusalReason": "Undefined"
                    }
                  },
                  "AUTH-SchemeCard-USD-Decline": {
                    "summary": "Make a payment (in USD) using a Card - Decline",
                    "description": "This example shows a payment Auth request using a Card (plain text) with am Declined Response",
                    "value": {
                      "resultCode": "Undefined",
                      "refusalReason": "Undefined"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "description": "/payments/{wpTransactionId}",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "/payments/{wpTransactionId}"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizePaymentResponse"
                    },
                    {
                      "example": {
                        "resultCode": "Undefined",
                        "refusalReason": "Undefined"
                      }
                    }
                  ]
                },
                "examples": {
                  "AUTH-SchemeCard-USD-Approve": {
                    "summary": "Make a payment (in USD) using a Card - Approve",
                    "description": "This example shows a payment Auth request using a Card (plain text) with am Approved Response",
                    "value": {
                      "resultCode": "Undefined",
                      "refusalReason": "Undefined"
                    }
                  },
                  "AUTH-SchemeCard-USD-Decline": {
                    "summary": "Make a payment (in USD) using a Card - Decline",
                    "description": "This example shows a payment Auth request using a Card (plain text) with am Declined Response",
                    "value": {
                      "resultCode": "Undefined",
                      "refusalReason": "Undefined"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ValidationProblemDetails"
                    },
                    {
                      "example": {
                        "value": {
                          "type": "https://httpstatuses.io/422",
                          "title": "Unprocessable Entity",
                          "status": 422,
                          "detail": "One of more errors occured trying to validate the request object",
                          "errors": {
                            "PaymentMethod.CardNumber": [
                              "'Card Number' must be between 12 and 24 characters. You entered 27 characters."
                            ],
                            "PaymentMethod.ExpiryMonth": [
                              "'Expiry Month' must be between 1 and 12. You entered 13."
                            ],
                            "PaymentMethod.ExpiryYear": [
                              "'Expiry Year' [2035] is typically not more the 5 years after being issued."
                            ],
                            "PaymentMethod.BillingAddress.CountryCode": [
                              "'Country Code' [US] Please supply a ISO 3166 (alpha-3) 3 character country code."
                            ]
                          }
                        },
                        "formatters": [],
                        "contentTypes": [],
                        "statusCode": 422
                      }
                    }
                  ]
                },
                "examples": {
                  "TOKENIZE: WP Security Token": {
                    "summary": "Generate WP Security Token for Card Information",
                    "description": "This example shows the response to generating a Security Token for Card Information",
                    "value": {
                      "value": {
                        "type": "https://httpstatuses.io/422",
                        "title": "Unprocessable Entity",
                        "status": 422,
                        "detail": "One of more errors occured trying to validate the request object",
                        "errors": {
                          "PaymentMethod.CardNumber": [
                            "'Card Number' must be between 12 and 24 characters. You entered 27 characters."
                          ],
                          "PaymentMethod.ExpiryMonth": [
                            "'Expiry Month' must be between 1 and 12. You entered 13."
                          ],
                          "PaymentMethod.ExpiryYear": [
                            "'Expiry Year' [2035] is typically not more the 5 years after being issued."
                          ],
                          "PaymentMethod.BillingAddress.CountryCode": [
                            "'Country Code' [US] Please supply a ISO 3166 (alpha-3) 3 character country code."
                          ]
                        }
                      },
                      "formatters": [],
                      "contentTypes": [],
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/{wpTransactionId}/capture": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "CapturePayment",
        "description": "You want to complete the authorization and initiate funds movement using the reference from your original request.",
        "operationId": "CapturePayment",
        "parameters": [
          {
            "name": "wpTransactionId",
            "in": "path",
            "description": "A unique identifier returned from the original transaction for the payment that you want to capture.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Capture Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The information for the Payment Capture Request",
                "example": {}
              },
              "examples": {
                "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                  "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                  "description": "This example shows a complete order for the Direct model",
                  "value": {}
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CancelPaymentResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/{wpTransactionId}/cancel": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "CancelPayment",
        "description": "You want to cancel a payment that has been authorised but not captured yet using the reference from your original request.",
        "operationId": "CancelPayment",
        "parameters": [
          {
            "name": "wpTransactionId",
            "in": "path",
            "description": "A unique identifier returned from the original transaction for the payment that you want to cancel.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Cancel Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The information for the Payment Cancel Request",
                "example": {}
              },
              "examples": {
                "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                  "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                  "description": "This example shows a complete order for the Direct model",
                  "value": {}
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CancelPaymentResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/{wpTransactionId}/refund": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "RefundPayment",
        "description": "You can refund either the full captured amount or a part of the captured amount. You can also perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.",
        "operationId": "RefundPayment",
        "parameters": [
          {
            "name": "wpTransactionId",
            "in": "path",
            "description": "A unique identifier returned from the original transaction for the payment that you want to refund.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Refund Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The information for the Payment Refund Request",
                "example": {}
              },
              "examples": {
                "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                  "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                  "description": "This example shows a complete order for the Direct model",
                  "value": {}
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CancelPaymentResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/{wpTransactionId}/reverse": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "ReversePayment",
        "description": "This will either: <br /><pre><span>•</span>Cancel the payment – in case it has not yet been captured. </pre><pre><span>•</span>Refund the payment – in case it has already been captured. </pre>",
        "operationId": "ReversePayment",
        "parameters": [
          {
            "name": "wpTransactionId",
            "in": "path",
            "description": "A unique identifier returned from the original transaction for the payment that you want to reverse.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wp-idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Payment Reversal Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The information for the Payment Reversal Request",
                "example": {}
              },
              "examples": {
                "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                  "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                  "description": "This example shows a complete order for the Direct model",
                  "value": {}
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/{wpTransactionId}": {
      "get": {
        "tags": [
          "/payments"
        ],
        "summary": "QueryPaymentState",
        "description": "You want to return information about the current state of the payment",
        "operationId": "QueryPaymentState",
        "parameters": [
          {
            "name": "wpTransactionId",
            "in": "path",
            "description": "A unique identifier returned from the original transaction for the payment that you want to query.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/payments/availablePaymentMethods": {
      "post": {
        "tags": [
          "/payments"
        ],
        "summary": "QueryAvailablePaymentMethods",
        "description": "Returns a list of available payment methods for the merchant",
        "operationId": "QueryAvailablePaymentMethods",
        "parameters": [
          {
            "name": "wp-correlationId",
            "in": "header",
            "description": "A identifier used to trace a request thru multiple internal platforms.  This would not be exposed to external callers (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The query payment methods request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QueryAvailablePaymentMethodsRequest"
                  },
                  {
                    "description": "The query payment methods request.",
                    "example": {
                      "merchantCode": "US_MERCHANT_CODE"
                    }
                  }
                ]
              },
              "examples": {
                "QAPM: US_MERCHANT_CODE": {
                  "summary": "Query available payment methods for a sample US Merchant Code",
                  "description": "This example shows the request for a sample US Merchant Code",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE"
                  }
                },
                "QAPM: UK_MERCHANT_CODE": {
                  "summary": "Query available payment methods for a sample UK Merchant Code",
                  "description": "This example shows the request for a sample UK Merchant Code",
                  "value": {
                    "merchantCode": "UK_MERCHANT_CODE"
                  }
                },
                "QAPM: INTL_MERCHANT_CODE": {
                  "summary": "Query available payment methods for a sample INTL Merchant Code",
                  "description": "This example shows the request for a sample INTL Merchant Code",
                  "value": {
                    "merchantCode": "INTL_MERCHANT_CODE"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/QueryAvailablePaymentMethodsResponse"
                    },
                    {
                      "example": {
                        "merchantCode": "US_MERCHANT_CODE",
                        "availablePaymentMethods": [
                          {
                            "paymentMethod": "card/scheme",
                            "currencyCode": [
                              "USD",
                              "CAD"
                            ]
                          },
                          {
                            "paymentMethod": "card/scheme_encrypted",
                            "currencyCode": [
                              "USD",
                              "CAD"
                            ]
                          },
                          {
                            "paymentMethod": "card/merchant_gift",
                            "currencyCode": [
                              "USD",
                              "CAD"
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "examples": {
                  "AUTH: paymentService_Auth_Request_Credit_Debit_Card": {
                    "summary": "ECom (Direct) order (AUTHORIZATION or SALE) w/ Credit or Debit Card",
                    "description": "This example shows a complete order for the Direct model",
                    "value": {
                      "merchantCode": "US_MERCHANT_CODE",
                      "availablePaymentMethods": [
                        {
                          "paymentMethod": "card/scheme",
                          "currencyCode": [
                            "USD",
                            "CAD"
                          ]
                        },
                        {
                          "paymentMethod": "card/scheme_encrypted",
                          "currencyCode": [
                            "USD",
                            "CAD"
                          ]
                        },
                        {
                          "paymentMethod": "card/merchant_gift",
                          "currencyCode": [
                            "USD",
                            "CAD"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/v1/tokens/createToken": {
      "post": {
        "tags": [
          "/tokens"
        ],
        "summary": "CreateToken",
        "description": "You want to create a token for the supplied information",
        "operationId": "CreateToken",
        "parameters": [
          {
            "name": "idempotencyKey",
            "in": "header",
            "description": "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
            "style": "simple",
            "schema": {
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        ],
        "requestBody": {
          "description": "The information for the Tokenize Request",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TokenizeRequest"
                  },
                  {
                    "description": "The information for the Tokenize Request",
                    "example": {
                      "merchantCode": "US_MERCHANT_CODE",
                      "dataToTokenize": {
                        "type": "card/scheme",
                        "cardNumber": "4111111111111111",
                        "cardVerificationCode": "123",
                        "expiryMonth": 1,
                        "expiryYear": 2025
                      }
                    }
                  }
                ]
              },
              "examples": {
                "TOKENIZE: WP Security Token": {
                  "summary": "Generate WP Security Token for Card Information",
                  "description": "This example shows generating a Security Token for Card Information",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "dataToTokenize": {
                      "type": "card/scheme",
                      "cardNumber": "4111111111111111",
                      "cardVerificationCode": "123",
                      "expiryMonth": 1,
                      "expiryYear": 2025
                    }
                  }
                },
                "TOKENIZE: WP Security Token for ACH Info": {
                  "summary": "Generate WP Security Token for ACH Info",
                  "description": "This example shows generating a Security Token for ACH Info",
                  "value": {
                    "merchantCode": "US_MERCHANT_CODE",
                    "dataToTokenize": {
                      "type": "direct_debit/ach",
                      "accountType": "checking",
                      "accountNumber": "01234567890123456",
                      "routingNumber": "01234567"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TokenizeResponse"
                    },
                    {
                      "example": {}
                    }
                  ]
                },
                "examples": {
                  "TOKENIZE: WP Security Token": {
                    "summary": "Generate WP Security Token for Card Information",
                    "description": "This example shows the response to generating a Security Token for Card Information",
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "APMIdealBankCode": {
        "title": "APMIdealBankCode",
        "enum": [
          "Undefined",
          "ABN_AMRO",
          "ASN",
          "BUNQ",
          "ING",
          "KNAB",
          "RABOBANK",
          "REVOLUT",
          "SNS",
          "SNS_REGIO",
          "TRIODOS",
          "VAN_LANSCHOT"
        ],
        "type": "string",
        "description": "Undefined\n\nABN_AMRO\n\nASN\n\nBUNQ\n\nING\n\nKNAB\n\nRABOBANK\n\nREVOLUT\n\nSNS\n\nSNS_REGIO\n\nTRIODOS\n\nVAN_LANSCHOT"
      },
      "CurrencyCode": {
        "title": "CurrencyCode",
        "enum": [
          "Undefined",
          "CAD",
          "EUR",
          "GBP",
          "USD"
        ],
        "type": "string",
        "description": "The three-character ISO 4217 currency code.\n\nUndefined\n\nCAD (Canadian Dollar [2 Decimal places implied, enter 1.23 as 123])\n\nEUR (Euro [2 Decimal places implied, enter 1.23 as 123])\n\nGBP (Pound Sterling [2 Decimal places implied, enter 1.23 as 123])\n\nUSD (US Dollar [2 Decimal places implied, enter 1.23 as 123])"
      },
      "CustomerInteractionType": {
        "title": "CustomerInteractionType",
        "enum": [
          "ECOMMERCE",
          "MOTO"
        ],
        "type": "string",
        "description": "ECOMMERCE (For transactions through your website (default))\n\nMOTO (For mail or telephone orders)"
      },
      "KlarnaWayToPay": {
        "title": "KlarnaWayToPay",
        "enum": [
          "UNKNOWN",
          "PAY_NOW",
          "PAY_LATER",
          "PAY_OVER_TIME"
        ],
        "type": "string",
        "description": "UNKNOWN\n\nPAY_NOW\n\nPAY_LATER\n\nPAY_OVER_TIME"
      },
      "NetworkTokenType": {
        "title": "NetworkTokenType",
        "enum": [
          "Undefined",
          "VISA",
          "MC",
          "AMEX"
        ],
        "type": "string",
        "description": "Undefined\n\nVISA\n\nMC\n\nAMEX"
      },
      "ProblemDetails": {
        "title": "ProblemDetails",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefusalReason": {
        "title": "RefusalReason",
        "enum": [
          "Undefined"
        ],
        "type": "string",
        "description": "Undefined (Unspecified)"
      },
      "ResultCode": {
        "title": "ResultCode",
        "enum": [
          "Undefined",
          "Authorized"
        ],
        "type": "string",
        "description": "Undefined (Undefined)\n\nAuthorized (The payment was successfully authorised. This is a final state.)"
      },
      "ValidationProblemDetails": {
        "title": "ValidationProblemDetails",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "The name of the street.",
            "nullable": true
          },
          "streetLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The name of the city",
            "nullable": true
          },
          "stateOrProvince": {
            "type": "string",
            "description": "The two-character ISO 3166-2 state or province code.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "The Postal Code associated with the address",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The three-character ISO-3166-1 country code",
            "nullable": true
          }
        }
      },
      "AirlineData": {
        "title": "AirlineData",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIndustryData"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "airlineCode": {
                "type": "string",
                "description": "IATA 3 digit code that identifies the carrier",
                "nullable": true
              },
              "ticketNumber": {
                "type": "string",
                "description": "The ticket's unique identifier",
                "nullable": true
              },
              "departureDate": {
                "type": "string",
                "description": "Flight departure date.",
                "format": "date"
              },
              "passenger": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndustryDataAirlinePassenger"
                  },
                  {}
                ]
              },
              "tripLegs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndustryDataAirlineFlightLeg"
                },
                "description": "Information about each leg of the flight",
                "nullable": true
              },
              "travelAgency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IndustryDataAirlineTravelAgency"
                  },
                  {}
                ]
              },
              "type": {
                "enum": [
                  "industry/airline"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Airline (Industry Specific) Data"
      },
      "Amount": {
        "title": "Amount",
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The amount of money, in the smallest denomination of the currency indicated by CurrencyCode.",
            "format": "int32"
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CurrencyCode"
              },
              {}
            ]
          }
        }
      },
      "APM_FISLoyalty": {
        "title": "APM_FISLoyalty",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "fisDiscountedAmount": {
                "type": "string",
                "description": "The actual discounted amounted returned to the terminal so the customer can determine whether to opt in/out.",
                "nullable": true
              },
              "FisLoyaltyEligibility": {
                "type": "boolean",
                "description": "True/False flag indicating the merchant's ability to accept Loyalty transactions."
              },
              "fisLoyaltyOptIn": {
                "type": "boolean",
                "description": "True/False flag on the follow-up message to indicate whether or not the customer accepts the discounted amount."
              },
              "fisLoyaltyTransactionID": {
                "type": "string",
                "description": "The FIS transaction ID that ties requests together. It should be sent on any follow-up messages.",
                "nullable": true
              },
              "fisLoyaltyRewardID": {
                "type": "string",
                "description": "This field contains the reward ID associated with the transaction.",
                "nullable": true
              },
              "fisLoyaltyPromoID": {
                "type": "string",
                "description": "This field contains the loyalty program associated with the transaction",
                "nullable": true
              },
              "fisLoyaltySequenceNumber": {
                "type": "string",
                "description": "This field contains the loyalty sequence number that must be submitted on subsequent loyalty transactions",
                "nullable": true
              },
              "fisLoyaltyReservationID": {
                "type": "string",
                "description": "This contains the reservation ID used with the loyalty system to reserve/finalize e-comm Premium Payback tranasactions.",
                "nullable": true
              },
              "fisLoyaltyPSPID": {
                "type": "string",
                "description": "This contains the PSP identifier associated with the processor who holds the loyalty reservation. It will be ignored without a Loyalty Reservation ID.",
                "nullable": true
              },
              "type": {
                "enum": [
                  "apm/fisloyalty"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for FIS Loyalty (Retail Rewards)"
      },
      "APM_Giropay": {
        "title": "APM_Giropay",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "successURL": {
                "type": "string",
                "nullable": true
              },
              "cancelURL": {
                "type": "string",
                "nullable": true
              },
              "failureURL": {
                "type": "string",
                "nullable": true
              },
              "pendingURL": {
                "type": "string",
                "nullable": true
              },
              "swiftCode": {
                "type": "string",
                "description": "The BIC/Swift code of the shopper’s bank. This can be either:\r\n - A valid BIC (Business Identifier Code)\r\n - Null",
                "nullable": true
              },
              "type": {
                "enum": [
                  "apm/giropay"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for GiroPay"
      },
      "APM_Ideal": {
        "title": "APM_Ideal",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "successURL": {
                "type": "string",
                "nullable": true
              },
              "failureURL": {
                "type": "string",
                "nullable": true
              },
              "cancelURL": {
                "type": "string",
                "nullable": true
              },
              "pendingURL": {
                "type": "string",
                "nullable": true
              },
              "bankCode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/APMIdealBankCode"
                  },
                  {}
                ]
              },
              "type": {
                "enum": [
                  "apm/ideal"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Ideal"
      },
      "APM_Klarna": {
        "title": "APM_Klarna",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "klarnaWayToPay": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KlarnaWayToPay"
                  },
                  {}
                ]
              },
              "successURL": {
                "type": "string",
                "nullable": true
              },
              "failureURL": {
                "type": "string",
                "nullable": true
              },
              "cancelURL": {
                "type": "string",
                "nullable": true
              },
              "pendingURL": {
                "type": "string",
                "nullable": true
              },
              "lineItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LineItem"
                },
                "description": "Price and product information about the purchased items, to be included on the invoice sent to the shopper.",
                "nullable": true
              },
              "type": {
                "enum": [
                  "apm/klarna"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for BNPL (Buy Now Pay Later) using Klarna"
      },
      "APM_Paypal": {
        "title": "APM_Paypal",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "successURL": {
                "type": "string",
                "nullable": true
              },
              "cancelURL": {
                "type": "string",
                "nullable": true
              },
              "failureURL": {
                "type": "string",
                "nullable": true
              },
              "pendingURL": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "apm/paypal"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Paypal"
      },
      "AuthorizePaymentRequest": {
        "title": "AuthorizePaymentRequest",
        "required": [
          "merchantCode",
          "amount",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "merchantCode": {
            "minLength": 1,
            "type": "string",
            "description": "The merchant account identifier we geve you under which you want to process this transaction."
          },
          "callersReferenceId": {
            "type": "string",
            "description": "Your reference value for this payment that is carried thru to reporting.",
            "nullable": true
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          },
          "paymentMethod": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Card_Scheme"
              },
              {
                "$ref": "#/components/schemas/Card_Scheme_Encrypted"
              },
              {
                "$ref": "#/components/schemas/Card_MerchantGift"
              },
              {
                "$ref": "#/components/schemas/Token_Network"
              },
              {
                "$ref": "#/components/schemas/Token_WPSecurity"
              },
              {
                "$ref": "#/components/schemas/Wallet_AmazonPay"
              },
              {
                "$ref": "#/components/schemas/Wallet_ApplePay"
              },
              {
                "$ref": "#/components/schemas/Wallet_GooglePay"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_SEPA"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_ACH"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_EFT"
              },
              {
                "$ref": "#/components/schemas/APM_Giropay"
              },
              {
                "$ref": "#/components/schemas/APM_Ideal"
              },
              {
                "$ref": "#/components/schemas/APM_Klarna"
              },
              {
                "$ref": "#/components/schemas/APM_FISLoyalty"
              },
              {
                "$ref": "#/components/schemas/APM_Paypal"
              }
            ],
            "description": "The type and required details of a payment method to use."
          },
          "industryData": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AirlineData"
              },
              {
                "$ref": "#/components/schemas/Level2and3Data"
              },
              {
                "$ref": "#/components/schemas/LodgingData"
              },
              {
                "nullable": true
              }
            ],
            "description": "Additional Industry Specific Data"
          },
          "customerData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerData"
              },
              {}
            ]
          },
          "scaData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScaData2"
              },
              {}
            ]
          },
          "payfacData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayfacData2"
              },
              {}
            ]
          },
          "additionalData": {
            "type": "object"
          },
          "dynamicMCC": {
            "type": "string",
            "description": "The merchant category code (MCC) is a four-digit number, which relates to a particular market segment.",
            "nullable": true
          },
          "customerInteractionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerInteractionType"
              },
              {}
            ]
          }
        }
      },
      "AuthorizePaymentResponse": {
        "title": "AuthorizePaymentResponse",
        "type": "object",
        "properties": {
          "wpTransactionId": {
            "type": "string",
            "description": "WorldPay's globally unique reference for this transaction/request.  You will use this value on all follow-up requests.",
            "nullable": true
          },
          "resultCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResultCode"
              },
              {}
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "refusalReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefusalReason"
              },
              {}
            ]
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          },
          "callersReferenceId": {
            "type": "string",
            "description": "Your reference value for this payment that is carried thru to reporting.",
            "nullable": true
          },
          "additionalData": {
            "type": "object"
          }
        }
      },
      "AvailablePaymentMethod": {
        "title": "AvailablePaymentMethod",
        "type": "object",
        "properties": {
          "paymentMethod": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyCode"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "BaseDataToTokenize": {
        "title": "BaseDataToTokenize",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card/scheme": "TokenData_Card_Scheme",
            "direct_debit/ach": "TokenData_DirectDebit_ACH"
          }
        }
      },
      "BaseIndustryData": {
        "title": "BaseIndustryData",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "industry/airline": "AirlineData",
            "industry/level2_3": "Level2and3Data",
            "industry/lodging": "LodgingData"
          }
        }
      },
      "BasePaymentMethod": {
        "title": "BasePaymentMethod",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "apm/fisloyalty": "APM_FISLoyalty",
            "apm/giropay": "APM_Giropay",
            "apm/ideal": "APM_Ideal",
            "apm/klarna": "APM_Klarna",
            "apm/paypal": "APM_Paypal",
            "card/merchant_gift": "Card_MerchantGift",
            "card/scheme": "Card_Scheme",
            "card/scheme_encrypted": "Card_Scheme_Encrypted",
            "direct_debit/ach": "DirectDebit_ACH",
            "direct_debit/eft": "DirectDebit_EFT",
            "direct_debit/sepa": "DirectDebit_SEPA",
            "token/network": "Token_Network",
            "token/wp_security": "Token_WPSecurity",
            "wallet/amazonpay": "Wallet_AmazonPay",
            "wallet/applepay": "Wallet_ApplePay",
            "wallet/googlepay": "Wallet_GooglePay"
          }
        }
      },
      "CancelPaymentResponse": {
        "title": "CancelPaymentResponse",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CapturePaymentResponse": {
        "title": "CapturePaymentResponse",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Card_MerchantGift": {
        "title": "Card_MerchantGift",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "cardNumber": {
                "type": "string",
                "description": "The Card Number",
                "nullable": true
              },
              "cardVerificationCode": {
                "type": "string",
                "description": "The card verification code (same as CVV or CID)",
                "nullable": true
              },
              "type": {
                "enum": [
                  "card/merchant_gift"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Closed Loop Gift Card"
      },
      "Card_Scheme": {
        "title": "Card_Scheme",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "cardNumber",
              "cardVerificationCode",
              "expiryMonth",
              "expiryYear",
              "type"
            ],
            "type": "object",
            "properties": {
              "cardHolderName": {
                "type": "string",
                "description": "The name of the CardHolder",
                "nullable": true
              },
              "cardNumber": {
                "minLength": 1,
                "type": "string",
                "description": "The Card Number"
              },
              "cardVerificationCode": {
                "minLength": 1,
                "type": "string",
                "description": "The card verification code (same as CVV or CID)"
              },
              "expiryMonth": {
                "type": "integer",
                "description": "The Card Expiry Month (1-12)",
                "format": "int32"
              },
              "expiryYear": {
                "type": "integer",
                "description": "The Card Expiry Year",
                "format": "int32"
              },
              "returnSecurityToken": {
                "type": "boolean",
                "description": "If true, return a new or existing Security Token for this Card Number",
                "nullable": true
              },
              "type": {
                "enum": [
                  "card/scheme"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Full Card Information"
      },
      "Card_Scheme_Encrypted": {
        "title": "Card_Scheme_Encrypted",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "encryptedCardNumber": {
                "type": "string",
                "description": "The encrypted Card Number",
                "nullable": true
              },
              "encryptedCardVerificationCode": {
                "type": "string",
                "description": "The encrypted card verification code (same as CVV or CID)",
                "nullable": true
              },
              "encryptedExpiryMonth": {
                "type": "string",
                "description": "The encrypted Card Expiry Month",
                "nullable": true
              },
              "encryptedExpiryYear": {
                "type": "string",
                "description": "The encrypted Card Expiry Year",
                "nullable": true
              },
              "CardHolderName": {
                "type": "string",
                "description": "The name of the CardHolder",
                "nullable": true
              },
              "type": {
                "enum": [
                  "card/scheme_encrypted"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Similiar to CardSchemePlain except the PCI fields are encrypted with a merchant provided key"
      },
      "Customer": {
        "title": "Customer",
        "type": "object",
        "properties": {
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "shippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The customer's telephone number.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The customer's date of birth in ISO-8601 format (YYYY-MM-DD)",
            "format": "date",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "The customer's IP address.",
            "nullable": true
          },
          "shopperLocale": {
            "type": "string",
            "description": "The RFC 1766 language string for this shopper",
            "nullable": true
          }
        },
        "description": "Information About the customer"
      },
      "DirectDebit_ACH": {
        "title": "DirectDebit_ACH",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "accountType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DirectDebit_ACHAccountType"
                  },
                  {}
                ]
              },
              "accountNumber": {
                "type": "string",
                "nullable": true
              },
              "routingNumber": {
                "type": "string",
                "nullable": true
              },
              "checkNumber": {
                "type": "string",
                "nullable": true
              },
              "companyName": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "direct_debit/ach"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Direct Debit in the US"
      },
      "DirectDebit_ACHAccountType": {
        "title": "DirectDebit_ACHAccountType",
        "enum": [
          "Undefined",
          "checking",
          "savings",
          "corporate",
          "corporateSavings"
        ],
        "type": "string",
        "description": "Undefined (Undefined)\n\nchecking (Checking Accounts.)\n\nsavings (Savings Accounts.)\n\ncorporate (Corporate Accounts.)\n\ncorporateSavings (Corporate Savings Accounts.)"
      },
      "DirectDebit_EFT": {
        "title": "DirectDebit_EFT",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "accountType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DirectDebit_ACHAccountType"
                  },
                  {}
                ]
              },
              "accountNumber": {
                "type": "string",
                "nullable": true
              },
              "routingNumber": {
                "type": "string",
                "nullable": true
              },
              "checkNumber": {
                "type": "string",
                "nullable": true
              },
              "companyName": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "direct_debit/eft"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Direct Debit in the US"
      },
      "DirectDebit_EFTAccountType": {
        "title": "DirectDebit_EFTAccountType",
        "enum": [
          "Undefined",
          "checking",
          "savings",
          "corporate",
          "corporateSavings"
        ],
        "type": "string",
        "description": "Undefined (Undefined)\n\nchecking (Checking Accounts.)\n\nsavings (Savings Accounts.)\n\ncorporate (Corporate Accounts.)\n\ncorporateSavings (Corporate Savings Accounts.)"
      },
      "DirectDebit_SEPA": {
        "title": "DirectDebit_SEPA",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "iban": {
                "type": "string",
                "description": "International Bank Account Number",
                "nullable": true
              },
              "type": {
                "enum": [
                  "direct_debit/sepa"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Direct Debit via SEPA"
      },
      "IndustryDataAirlineFlightLeg": {
        "title": "IndustryDataAirlineFlightLeg",
        "type": "object",
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "IATA 2-letter accounting code that identifies the carrier.",
            "nullable": true
          },
          "flightNumber": {
            "type": "string",
            "description": "The carrier's identifier for this flight",
            "nullable": true
          },
          "classOfTravel": {
            "type": "string",
            "description": "1-letter travel class identifier",
            "nullable": true
          },
          "departureDate": {
            "type": "string",
            "description": "Departure Date and Time of this leg",
            "format": "date-time"
          },
          "departureTax": {
            "type": "integer",
            "description": "Amount charged by a country to an individual upon their leaving in minor units",
            "format": "int32"
          },
          "destinationAirportCode": {
            "type": "string",
            "description": "Alphabetical identifier of the destination/arrival airport",
            "nullable": true
          },
          "fareBasisCode": {
            "type": "string",
            "description": "alphabetic or alpha-numeric code used by airlines to identify a fare type",
            "nullable": true
          }
        }
      },
      "IndustryDataAirlinePassenger": {
        "title": "IndustryDataAirlinePassenger",
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Passenger's first name/given name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Passenger's last name/family name.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Passenger's Date of Birth",
            "format": "date"
          },
          "telephoneNumber": {
            "type": "string",
            "description": "Passenger's Telephone Number",
            "nullable": true
          },
          "travelerType": {
            "type": "string",
            "description": "IATA PTC (Passenger type code)",
            "nullable": true
          }
        }
      },
      "IndustryDataAirlineTravelAgency": {
        "title": "IndustryDataAirlineTravelAgency",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique IATA number (also ARC number or ARC/IATA number) for the travel agency.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the travel agency.",
            "nullable": true
          }
        }
      },
      "Level2and3Data": {
        "title": "Level2and3Data",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIndustryData"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "customerReference": {
                "type": "string",
                "description": "Card acceptor’s internal invoice or billing ID reference number.",
                "nullable": true
              },
              "invoiceReferenceNo": {
                "type": "string",
                "nullable": true
              },
              "orderDate": {
                "type": "string",
                "format": "date"
              },
              "shipFromCountryCode": {
                "type": "string",
                "nullable": true
              },
              "shipFromPostalCode": {
                "type": "string",
                "nullable": true
              },
              "destinationCountryCode": {
                "type": "string",
                "nullable": true
              },
              "destinationPostalCode": {
                "type": "string",
                "nullable": true
              },
              "lineItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Level2and3LineItem"
                },
                "description": "Line items associated with this order",
                "nullable": true
              },
              "type": {
                "enum": [
                  "industry/level2_3"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Level 2 and 3 (Industry Specific) Data"
      },
      "Level2and3LineItem": {
        "title": "Level2and3LineItem",
        "type": "object",
        "properties": {
          "itemSequenceNo": {
            "type": "string",
            "nullable": true
          },
          "commodityCode": {
            "type": "string",
            "nullable": true
          },
          "itemDescription": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          },
          "itemDiscountAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          },
          "lineItemTotal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          }
        },
        "description": "Support for Level 2 and 3 (Industry Specific) Line Item Data"
      },
      "LineItem": {
        "title": "LineItem",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "qtyUnitOfMeasure": {
            "type": "string",
            "nullable": true
          },
          "unitPrice": {
            "type": "integer",
            "format": "int32"
          },
          "taxPercentage": {
            "type": "integer",
            "format": "int32"
          },
          "taxAmount": {
            "type": "integer",
            "format": "int32"
          },
          "amountIncludingTax": {
            "type": "integer",
            "format": "int32"
          },
          "productUrl": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LodgingData": {
        "title": "LodgingData",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIndustryData"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "hotelFolioNumber": {
                "type": "string",
                "description": "Card acceptor’s internal invoice or billing ID reference number.",
                "nullable": true
              },
              "checkInDate": {
                "type": "string",
                "description": "The Date you are checking in",
                "format": "date"
              },
              "checkOutDate": {
                "type": "string",
                "description": "The Date you are checking out",
                "format": "date"
              },
              "numberOfDays": {
                "type": "integer",
                "description": "Total number of nights the room will be rented.",
                "format": "int32"
              },
              "numberOfAdults": {
                "type": "integer",
                "description": "The total amount of adults staying in the room",
                "format": "int32"
              },
              "customerServiceTollFreeNumber": {
                "type": "string",
                "description": "The toll free phone number for customer service",
                "nullable": true
              },
              "propertyLocalPhoneNumber": {
                "type": "string",
                "description": "The local phone number for the property",
                "nullable": true
              },
              "fireSafetyIndicator": {
                "type": "boolean",
                "description": "Does the facility complies with the Hotel and Motel Fire Safety Act of 1990"
              },
              "roomRate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  },
                  {}
                ]
              },
              "roomTax": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  },
                  {}
                ]
              },
              "type": {
                "enum": [
                  "industry/lodging"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Lodging (Industry Specific) Data"
      },
      "PayfacData": {
        "title": "PayfacData",
        "required": [
          "payfacId",
          "submerchantId",
          "submerchantName",
          "submerchantAddress"
        ],
        "type": "object",
        "properties": {
          "payfacId": {
            "minLength": 1,
            "type": "string"
          },
          "isoId": {
            "type": "string",
            "nullable": true
          },
          "submerchantId": {
            "minLength": 1,
            "type": "string"
          },
          "submerchantName": {
            "minLength": 1,
            "type": "string"
          },
          "submerchantAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "submerchantTaxId": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Additional (optional) Information About the submerchant if you are a PayFac (Payment Facilitator)"
      },
      "QueryAvailablePaymentMethodsRequest": {
        "title": "QueryAvailablePaymentMethodsRequest",
        "type": "object",
        "properties": {
          "merchantCode": {
            "type": "string",
            "description": "The merchant account identifier we geve you under which you want to process this transaction.",
            "nullable": true
          }
        }
      },
      "QueryAvailablePaymentMethodsResponse": {
        "title": "QueryAvailablePaymentMethodsResponse",
        "type": "object",
        "properties": {
          "merchantCode": {
            "type": "string",
            "description": "The merchant account identifier we geve you under which you want to process this transaction.",
            "nullable": true
          },
          "availablePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailablePaymentMethod"
            },
            "description": "",
            "nullable": true
          }
        }
      },
      "RefundPaymentResponse": {
        "title": "RefundPaymentResponse",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SalePaymentRequest": {
        "title": "SalePaymentRequest",
        "type": "object",
        "properties": {
          "merchantCode": {
            "type": "string",
            "description": "The merchant account identifier we geve you under which you want to process this transaction.",
            "nullable": true
          },
          "callersReferenceId": {
            "type": "string",
            "description": "Your reference value for this payment that is carried thru to reporting.",
            "nullable": true
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {}
            ]
          },
          "paymentMethod": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Card_Scheme"
              },
              {
                "$ref": "#/components/schemas/Card_Scheme_Encrypted"
              },
              {
                "$ref": "#/components/schemas/Card_MerchantGift"
              },
              {
                "$ref": "#/components/schemas/Token_Network"
              },
              {
                "$ref": "#/components/schemas/Token_WPSecurity"
              },
              {
                "$ref": "#/components/schemas/Wallet_AmazonPay"
              },
              {
                "$ref": "#/components/schemas/Wallet_ApplePay"
              },
              {
                "$ref": "#/components/schemas/Wallet_GooglePay"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_SEPA"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_ACH"
              },
              {
                "$ref": "#/components/schemas/DirectDebit_EFT"
              },
              {
                "$ref": "#/components/schemas/APM_Giropay"
              },
              {
                "$ref": "#/components/schemas/APM_Ideal"
              },
              {
                "$ref": "#/components/schemas/APM_Klarna"
              },
              {
                "$ref": "#/components/schemas/APM_FISLoyalty"
              },
              {
                "$ref": "#/components/schemas/APM_Paypal"
              },
              {
                "nullable": true
              }
            ],
            "description": "The type and required details of a payment method to use."
          },
          "customerData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerData"
              },
              {}
            ]
          },
          "additionalData": {
            "type": "object"
          },
          "dynamicMCC": {
            "type": "string",
            "description": "The merchant category code (MCC) is a four-digit number, which relates to a particular market segment.",
            "nullable": true
          },
          "customerInteractionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerInteractionType"
              },
              {}
            ]
          }
        }
      },
      "SCAData": {
        "title": "SCAData",
        "type": "object",
        "properties": {
          "authenticationRiskData": {
            "type": "object",
            "description": "Information about the shopper and how they are authenticating with Worldpay."
          },
          "shopperAccountRiskData": {
            "type": "object",
            "description": "Information about the shopper's account with you."
          },
          "transactionRiskData": {
            "type": "object",
            "description": "Information about the order."
          }
        },
        "description": "Information to support Strong Customer AUthentication (SCA)"
      },
      "Token_Network": {
        "title": "Token_Network",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The token issued by the card brand.",
                "nullable": true
              },
              "tokenType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkTokenType"
                  },
                  {}
                ]
              },
              "expiryMonth": {
                "type": "integer",
                "description": "The expiry month of the network token.",
                "format": "int32"
              },
              "expiryYear": {
                "type": "integer",
                "description": "The expiry year of the network token.",
                "format": "int32"
              },
              "eci": {
                "type": "string",
                "description": "The electronic commerce indicator you get from the issuer.",
                "nullable": true
              },
              "cryptogram": {
                "type": "string",
                "description": "Unique value to the token, merchant, and individual transaction generated by the card network",
                "nullable": true
              },
              "type": {
                "enum": [
                  "token/network"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Network Tokens"
      },
      "Token_WPSecurity": {
        "title": "Token_WPSecurity",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "tokenValue": {
                "type": "string",
                "description": "The Worldpay Security Token representing the Card No",
                "nullable": true
              },
              "expiryMonth": {
                "type": "integer",
                "description": "The Card Expiry Month (if suppplied will be used in place of the value stored with the token)",
                "format": "int32",
                "nullable": true
              },
              "expiryYear": {
                "type": "integer",
                "description": "The Card Expiry Year (if suppplied will be used in place of the value stored with the token)",
                "format": "int32",
                "nullable": true
              },
              "type": {
                "enum": [
                  "token/wp_security"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Worldpay Security Tokens"
      },
      "TokenData_Card_Scheme": {
        "title": "TokenData_Card_Scheme",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDataToTokenize"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "cardNumber": {
                "type": "string",
                "description": "The Card Number",
                "nullable": true
              },
              "cardVerificationCode": {
                "type": "string",
                "description": "The card verification code (same as CVV or CID)",
                "nullable": true
              },
              "expiryMonth": {
                "type": "integer",
                "description": "The Card Expiry Month",
                "format": "int32"
              },
              "expiryYear": {
                "type": "integer",
                "description": "The Card Expiry Year",
                "format": "int32"
              },
              "type": {
                "enum": [
                  "card/scheme"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "TokenData_DirectDebit_ACH": {
        "title": "TokenData_DirectDebit_ACH",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDataToTokenize"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "accountType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DirectDebit_ACHAccountType"
                  },
                  {}
                ]
              },
              "accountNumber": {
                "type": "string",
                "nullable": true
              },
              "routingNumber": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "direct_debit/ach"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "TokenizeRequest": {
        "title": "TokenizeRequest",
        "required": [
          "merchantCode",
          "dataToTokenize"
        ],
        "type": "object",
        "properties": {
          "merchantCode": {
            "minLength": 1,
            "type": "string",
            "description": "The merchant account identifier we geve you under which you want to process this transaction."
          },
          "dataToTokenize": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TokenData_Card_Scheme"
              },
              {
                "$ref": "#/components/schemas/TokenData_DirectDebit_ACH"
              }
            ],
            "description": "The type and required details of data to tokenize"
          }
        }
      },
      "TokenizeResponse": {
        "title": "TokenizeResponse",
        "type": "object",
        "properties": {
          "tokenValue": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Wallet_AmazonPay": {
        "title": "Wallet_AmazonPay",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "amazonPayChargeID": {
                "type": "integer",
                "description": "ID of the Charge object created at Amazon Pay. It should be passed on every subsequent request for this transaction.",
                "format": "int32"
              },
              "amazonPayToken": {
                "type": "integer",
                "description": "This field represents the high value token for the transaction.",
                "format": "int32"
              },
              "amazonPayBillingDescriptor": {
                "type": "integer",
                "description": "The description to be shown on the buyer's payment statement. For a payment, it should be passed either during authorization or capture.",
                "format": "int32"
              },
              "amazonPayMerchantOrderNumber": {
                "type": "integer",
                "description": "This field contains the order number associated with the transaction. Any inquiries regarding the transactions should use this value.",
                "format": "int32"
              },
              "amazonPayMerchantID": {
                "type": "integer",
                "description": "Gets or sets my property.",
                "format": "int32"
              },
              "type": {
                "enum": [
                  "wallet/amazonpay"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Amazon Pay payments"
      },
      "Wallet_ApplePay": {
        "title": "Wallet_ApplePay",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "header": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Wallet_ApplePayWalletHeader"
                  },
                  {}
                ]
              },
              "signature": {
                "type": "string",
                "nullable": true
              },
              "version": {
                "type": "string",
                "nullable": true
              },
              "data": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "wallet/applepay"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Apple Pay payments with Visa, Mastercard, Maestro, American Express (Amex) and Discover cards."
      },
      "Wallet_ApplePayWalletHeader": {
        "title": "Wallet_ApplePayWalletHeader",
        "type": "object",
        "properties": {
          "ephemeralPublicKey": {
            "type": "string",
            "nullable": true
          },
          "publicKeyHash": {
            "type": "string",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Wallet_GooglePay": {
        "title": "Wallet_GooglePay",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePaymentMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "protocolVersion": {
                "type": "string",
                "nullable": true
              },
              "signature": {
                "type": "string",
                "nullable": true
              },
              "signedMessage": {
                "type": "string",
                "nullable": true
              },
              "type": {
                "enum": [
                  "wallet/googlepay"
                ],
                "type": "string"
              }
            }
          }
        ],
        "description": "Support for Google Pay payments with Visa, Mastercard and American Express (Amex) cards."
      },
      "CustomerData": {
        "title": "CustomerData",
        "type": "object",
        "properties": {
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "shippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The customer's telephone number.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The customer's date of birth in ISO-8601 format (YYYY-MM-DD)",
            "format": "date",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "The customer's IP address.",
            "nullable": true
          },
          "shopperLocale": {
            "type": "string",
            "description": "The RFC 1766 language string for this shopper",
            "nullable": true
          }
        }
      },
      "PayfacData2": {
        "title": "PayfacData2",
        "required": [
          "payfacId",
          "submerchantId",
          "submerchantName",
          "submerchantAddress"
        ],
        "type": "object",
        "properties": {
          "payfacId": {
            "minLength": 1,
            "type": "string"
          },
          "isoId": {
            "type": "string",
            "nullable": true
          },
          "submerchantId": {
            "minLength": 1,
            "type": "string"
          },
          "submerchantName": {
            "minLength": 1,
            "type": "string"
          },
          "submerchantAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {}
            ]
          },
          "submerchantTaxId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ScaData2": {
        "title": "ScaData2",
        "type": "object",
        "properties": {
          "authenticationRiskData": {
            "type": "object",
            "description": "Information about the shopper and how they are authenticating with Worldpay."
          },
          "shopperAccountRiskData": {
            "type": "object",
            "description": "Information about the shopper's account with you."
          },
          "transactionRiskData": {
            "type": "object",
            "description": "Information about the order."
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "/payments",
      "description": ""
    },
    {
      "name": "/tokens",
      "description": ""
    }
  ]
}